type Query {
    buscarPorId(id: ID!) : ProjetoOut
    buscarPorNome(nome: String) : [ProjetoOut]
    buscarTodos: [ProjetoOut]

    #    Endpoint Tarefa
#    buscarTarefaPorId(id: ID) : TarefaOut
#    buscarTarefasPorProjeto(idProjeto: ID): [TarefaOut]
#    filtarTarefaPorStatus(idProjeto: ID, status: Status): [TarefaOut]
}

type Mutation{
    criar(projeto: Projeto!) : ProjetoOut
    excluir(id: ID!) : Boolean

    #    Endpoint Tarefa
#    criarTarefa(tarefa: Tarefa): TarefaOut
}

input Projeto {
    nome: String!
    descricao: String
    dataInicio: String!
    dataFim: String
    status: Status!
    prioridade: Prioridade!
    responsavel: String!
}

type ProjetoOut {
    id: ID
    nome: String!
    descricao: String
    dataInicio: String!
    dataFim: String
    status: Status!
    prioridade: Prioridade!
    responsavel: String!
    tarefas: [TarefaOut]
}

#input Tarefa {
#    titulo: String!
#    descricao: String
#    prazo: String
#    dataInicio: String!
#    dataFim: String
#    status: Status!
#    prioridade: Prioridade!
#    projeto: String!
#}
#
#type TarefaOut {
#    id: ID
#    titulo: String!
#    descricao: String
#    prazo: String
#    dataInicio: String!
#    dataFim: String
#    status: Status!
#    prioridade: Prioridade!
#    projeto: String!
#}

enum Status {
    PLANEJAMENTO
    EXECUCAO
    IMPEDIMENTO
    FINALIZADO
    CANCELADO
}

enum Prioridade {
    BAIXA
    MEDIA
    ALTA
}